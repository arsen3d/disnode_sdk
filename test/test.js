'use strict'

const DisNodeSDK = require('../');

// Account is a constructor with no required inputs
const temp = new DisNodeSDK.Account();
// It can also accept any account fields; the most prominant being the privateKey
const test = new DisNodeSDK.Account({name: 'NodeSDKTest', privateKey: '70dcae0f1020d5b35f2be2df6146b432be594407121ac7c8cb48540ecc5e7ede' });

// Use account.init() to generate a private key
temp.init();
// Models output clean strings in logs and JSON.stringify
console.log('Temp account:\n' + temp + '\n');

// Account objects can send tokens to other accounts directly; returning the resulting Transaciton
let tx = test.sendTokens(temp, 5);
console.log('New transaction:\n' + tx + '\n');

// Use 'whenStatusEquals' (returns a Promise) to wait for the transaction to finish
tx.whenStatusEquals('Ok')
  .then(
    (result) => {
      console.log('Transaction result:\n' + JSON.stringify(result) + '\n');
    }, (err) => {
      console.error(err);
    }
  );

const code = '608060405234801561001057600080fd5b506040805190810160405280600d81526020017f61616161616161616161616161000000000000000000000000000000000000008152506000908051906020019061005c9291906100f8565b5060006002600001819055506000600260010160006101000a81548160ff0219169083151502179055506001600260010160016101000a81548160ff021916908360ff1602179055506040805190810160405280600b81526020017f62626262626262626262620000000000000000000000000000000000000000008152506002800190805190602001906100f29291906100f8565b5061019d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013957805160ff1916838001178555610167565b82800160010185558215610167579182015b8281111561016657825182559160200191906001019061014b565b5b5090506101749190610178565b5090565b61019a91905b8082111561019657600081600090555060010161017e565b5090565b90565b6109c5806101ac6000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806333e538e91461009e57806334e45f531461012e5780633a458b1f146101975780636e59c66c1461024657806378d8866e146102f557806379af647314610385578063cb69e3001461039c578063e4e38c7c14610405578063e98483cb14610495575b600080fd5b3480156100aa57600080fd5b506100b3610525565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f35780820151818401526020810190506100d8565b50505050905090810190601f1680156101205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013a57600080fd5b50610195600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506105c7565b005b3480156101a357600080fd5b506101ac6105e3565b60405180858152602001841515151581526020018360ff1660ff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102085780820151818401526020810190506101ed565b50505050905090810190601f1680156102355780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561025257600080fd5b506102f3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506106b3565b005b34801561030157600080fd5b5061030a6106e5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561034a57808201518184015260208101905061032f565b50505050905090810190601f1680156103775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039157600080fd5b5061039a610783565b005b3480156103a857600080fd5b50610403600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061079a565b005b34801561041157600080fd5b5061041a6107b4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561045a57808201518184015260208101905061043f565b50505050905090810190601f1680156104875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104a157600080fd5b506104aa610856565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ea5780820151818401526020810190506104cf565b50505050905090810190601f1680156105175780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105bd5780601f10610592576101008083540402835291602001916105bd565b820191906000526020600020905b8154815290600101906020018083116105a057829003601f168201915b5050505050905090565b806002800190805190602001906105df9291906108f4565b5050565b60028060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff1690806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106a95780601f1061067e576101008083540402835291602001916106a9565b820191906000526020600020905b81548152906001019060200180831161068c57829003601f168201915b5050505050905084565b81600090805190602001906106c99291906108f4565b5080600190805190602001906106e09291906108f4565b505050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561077b5780601f106107505761010080835404028352916020019161077b565b820191906000526020600020905b81548152906001019060200180831161075e57829003601f168201915b505050505081565b600260000160008154809291906001019190505550565b80600090805190602001906107b09291906108f4565b5050565b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561084c5780601f106108215761010080835404028352916020019161084c565b820191906000526020600020905b81548152906001019060200180831161082f57829003601f168201915b5050505050905090565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108ec5780601f106108c1576101008083540402835291602001916108ec565b820191906000526020600020905b8154815290600101906020018083116108cf57829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061093557805160ff1916838001178555610963565b82800160010185558215610963579182015b82811115610962578251825591602001919060010190610947565b5b5090506109709190610974565b5090565b61099691905b8082111561099257600081600090555060010161097a565b5090565b905600a165627a7a72305820074899e01fcd4d2ae6ffd88a31c3bc77477fff7ed19e4bf8dc4af234d33dd4b80029';
const abi = [
      {
        "constant": true,
        "inputs": [],
        "name": "getVar5",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "value",
            "type": "string"
          }
        ],
        "name": "setVar6Var4",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "var6",
        "outputs": [
          {
            "name": "var1",
            "type": "uint256"
          },
          {
            "name": "var2",
            "type": "bool"
          },
          {
            "name": "var3",
            "type": "uint8"
          },
          {
            "name": "var4",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "value1",
            "type": "string"
          },
          {
            "name": "value2",
            "type": "string"
          }
        ],
        "name": "setMultiple",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "var5",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "incVar6Var1",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "value",
            "type": "string"
          }
        ],
        "name": "setVar5",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getVar55",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "var55",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      }
    ];

// Accounts can create Smart Contracts using compiled values
const contract = test.createContract(code, abi);
console.log('New contract:\n' + contract + '\n');

// Once a contract is created, it can be executed
contract
  .whenStatusEquals('Ok')
    .then(() => {
      // Exection happens from the account, to the contract, along with the method and parameters
      temp.executeContract(contract, 'setMultiple', [5555], abi)
        .whenStatusEquals('Ok')
          .then((result) => {
            console.log('Contract execution result:\n' + JSON.stringify(result) + '\n');
          }, (err) => {
            console.error(err);
          });
    }, (err) => {
      console.error(err);
    });

// Transactions may also be created and executed directly
tx = new DisNodeSDK.Transaction({
  from: temp,
  to: test,
  tokens: 5
});
console.log('Transaction:\n' + tx + '\n');

// Transactions can also be sent directly, which returns a Promise
tx.send()
  .then((result) => {
    console.log('Transaction submission:\n' + JSON.stringify(result) + '\n');
  }, (err) => {
    console.error(err);
  });